"""Create Database and Tables

Revision ID: 2c78f5a34be6
Revises: 
Create Date: 2023-12-12 16:14:37.813612

"""
from typing import Sequence, Union

from migrations import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2c78f5a34be6'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('addresses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('street_name', sa.String(), nullable=True),
    sa.Column('formatted_address', sa.String(), nullable=True),
    sa.Column('street_number', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('neighborhood', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('complement', sa.String(), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_customers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('document_number', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('currency', sa.String(), nullable=True),
    sa.Column('total_amount', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('merchants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('document_type', sa.String(), nullable=True),
    sa.Column('document', sa.String(), nullable=True),
    sa.Column('address_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_merchants_id'), 'merchants', ['id'], unique=False)
    op.create_table('order_deliveries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pickup_code', sa.String(), nullable=True),
    sa.Column('delivered_by', sa.String(), nullable=True),
    sa.Column('delivery_dateTime', sa.DateTime(), nullable=True),
    sa.Column('index', sa.Integer(), nullable=True),
    sa.Column('address_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['address_id'], ['addresses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ifood_merchants',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ifood_client_id', sa.String(), nullable=False),
    sa.Column('authorization_type', sa.Enum('NOT_SENDED', 'WAITING', 'AUTHORIZED', name='authorizationtype'), nullable=True),
    sa.Column('ifood_permissions', sa.ARRAY(sa.Enum('MERCHANT', 'CATALOG', 'FINANCIAL', 'ORDERS', name='permissionstype')), nullable=True),
    sa.Column('merchant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchants.id'], ),
    sa.PrimaryKeyConstraint('id', 'ifood_client_id')
    )
    op.create_table('merchant_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('permissions', sa.Enum('OWNER', 'ADM', 'GARSON', 'CHEF', 'DRIVER', name='merchantuserrole'), nullable=True),
    sa.Column('merchant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchants.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_index(op.f('ix_merchant_users_id'), 'merchant_users', ['id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('additional_information', sa.String(), nullable=True),
    sa.Column('serving', sa.String(), nullable=True),
    sa.Column('dietary_restrictions', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('weight_quantity', sa.Float(), nullable=True),
    sa.Column('weight_unit', sa.String(), nullable=True),
    sa.Column('product_type', sa.Enum('REGULAR', 'IFOOD', name='producttype'), nullable=True),
    sa.Column('volume', sa.Float(), nullable=True),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('multiple_images', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('merchant_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ifood_products',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ifood_product_id', sa.String(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id', 'ifood_product_id')
    )
    op.create_table('orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_type', sa.Enum('DELIVERY', 'INDOOR', 'TAKEOUT', 'TABLE', name='ordertype'), nullable=True),
    sa.Column('order_timing', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('preparation_start_dateTime', sa.DateTime(), nullable=True),
    sa.Column('merchant_id', sa.Integer(), nullable=True),
    sa.Column('merchant_user_id', sa.Integer(), nullable=True),
    sa.Column('customer_id', sa.Integer(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('delivery_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['order_customers.id'], ),
    sa.ForeignKeyConstraint(['delivery_id'], ['order_deliveries.id'], ),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchants.id'], ),
    sa.ForeignKeyConstraint(['merchant_user_id'], ['merchant_users.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['order_payments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_option_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('external_code', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('index', sa.Integer(), nullable=True),
    sa.Column('min_options', sa.Integer(), nullable=True),
    sa.Column('max_options', sa.Integer(), nullable=True),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ifood_orders',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ifood_order_id', sa.String(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id', 'ifood_order_id')
    )
    op.create_table('order_items',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('total_price', sa.Float(), nullable=True),
    sa.Column('total_volume', sa.Float(), nullable=True),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('external_code', sa.String(), nullable=True),
    sa.Column('image_path', sa.String(), nullable=True),
    sa.Column('price_value', sa.Float(), nullable=True),
    sa.Column('price_original_value', sa.Float(), nullable=True),
    sa.Column('ean', sa.String(), nullable=True),
    sa.Column('option_group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['option_group_id'], ['product_option_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('product_options')
    op.drop_table('order_items')
    op.drop_table('ifood_orders')
    op.drop_table('product_option_groups')
    op.drop_table('orders')
    op.drop_table('ifood_products')
    op.drop_table('products')
    op.drop_index(op.f('ix_merchant_users_id'), table_name='merchant_users')
    op.drop_table('merchant_users')
    op.drop_table('ifood_merchants')
    op.drop_table('order_deliveries')
    op.drop_index(op.f('ix_merchants_id'), table_name='merchants')
    op.drop_table('merchants')
    op.drop_table('product_categories')
    op.drop_table('order_payments')
    op.drop_table('order_customers')
    op.drop_table('addresses')
    # ### end Alembic commands ###
